// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: core/topology.proto

package jagw

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string                    `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id          *string                    `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RouterHash  *string                    `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
	DomainId    *int64                     `protobuf:"varint,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	RouterIp    *string                    `protobuf:"bytes,5,opt,name=router_ip,json=routerIp" json:"router_ip,omitempty"`
	PeerHash    *string                    `protobuf:"bytes,6,opt,name=peer_hash,json=peerHash" json:"peer_hash,omitempty"`
	PeerIp      *string                    `protobuf:"bytes,7,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	PeerAsn     *int32                     `protobuf:"varint,8,opt,name=peer_asn,json=peerAsn" json:"peer_asn,omitempty"`
	Timestamp   *string                    `protobuf:"bytes,9,opt,name=timestamp" json:"timestamp,omitempty"`
	IgpRouterId *string                    `protobuf:"bytes,10,opt,name=igp_router_id,json=igpRouterId" json:"igp_router_id,omitempty"`
	Asn         *uint32                    `protobuf:"varint,11,opt,name=asn" json:"asn,omitempty"`
	Mtid        []*MultiTopologyIdentifier `protobuf:"bytes,12,rep,name=mtid" json:"mtid,omitempty"`
	AreaId      *string                    `protobuf:"bytes,13,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	Protocol    *string                    `protobuf:"bytes,14,opt,name=protocol" json:"protocol,omitempty"`
	ProtocolId  *uint32                    `protobuf:"varint,15,opt,name=protocol_id,json=protocolId" json:"protocol_id,omitempty"` // protobuf does not support uint8
	Name        *string                    `protobuf:"bytes,16,opt,name=name" json:"name,omitempty"`
	IsPrepolicy *bool                      `protobuf:"varint,17,opt,name=is_prepolicy,json=isPrepolicy" json:"is_prepolicy,omitempty"`
	IsAdjRibIn  *bool                      `protobuf:"varint,18,opt,name=is_adj_rib_in,json=isAdjRibIn" json:"is_adj_rib_in,omitempty"`
}

func (x *LsNode) Reset() {
	*x = LsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNode) ProtoMessage() {}

func (x *LsNode) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNode.ProtoReflect.Descriptor instead.
func (*LsNode) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{0}
}

func (x *LsNode) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsNode) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsNode) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LsNode) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *LsNode) GetRouterIp() string {
	if x != nil && x.RouterIp != nil {
		return *x.RouterIp
	}
	return ""
}

func (x *LsNode) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LsNode) GetPeerIp() string {
	if x != nil && x.PeerIp != nil {
		return *x.PeerIp
	}
	return ""
}

func (x *LsNode) GetPeerAsn() int32 {
	if x != nil && x.PeerAsn != nil {
		return *x.PeerAsn
	}
	return 0
}

func (x *LsNode) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LsNode) GetIgpRouterId() string {
	if x != nil && x.IgpRouterId != nil {
		return *x.IgpRouterId
	}
	return ""
}

func (x *LsNode) GetAsn() uint32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *LsNode) GetMtid() []*MultiTopologyIdentifier {
	if x != nil {
		return x.Mtid
	}
	return nil
}

func (x *LsNode) GetAreaId() string {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return ""
}

func (x *LsNode) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LsNode) GetProtocolId() uint32 {
	if x != nil && x.ProtocolId != nil {
		return *x.ProtocolId
	}
	return 0
}

func (x *LsNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LsNode) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LsNode) GetIsAdjRibIn() bool {
	if x != nil && x.IsAdjRibIn != nil {
		return *x.IsAdjRibIn
	}
	return false
}

type LsLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key               *string                  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id                *string                  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RouterHash        *string                  `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
	RouterIp          *string                  `protobuf:"bytes,4,opt,name=router_ip,json=routerIp" json:"router_ip,omitempty"`
	DomainId          *int64                   `protobuf:"varint,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	PeerHash          *string                  `protobuf:"bytes,6,opt,name=peer_hash,json=peerHash" json:"peer_hash,omitempty"`
	PeerIp            *string                  `protobuf:"bytes,7,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	PeerAsn           *int32                   `protobuf:"varint,8,opt,name=peer_asn,json=peerAsn" json:"peer_asn,omitempty"`
	Timestamp         *string                  `protobuf:"bytes,9,opt,name=timestamp" json:"timestamp,omitempty"`
	IgpRouterId       *string                  `protobuf:"bytes,10,opt,name=igp_router_id,json=igpRouterId" json:"igp_router_id,omitempty"`
	Protocol          *string                  `protobuf:"bytes,11,opt,name=protocol" json:"protocol,omitempty"`
	AreaId            *string                  `protobuf:"bytes,12,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	Nexthop           *string                  `protobuf:"bytes,13,opt,name=nexthop" json:"nexthop,omitempty"`
	Mtid              *MultiTopologyIdentifier `protobuf:"bytes,14,opt,name=mtid" json:"mtid,omitempty"`
	LocalLinkId       *string                  `protobuf:"bytes,15,opt,name=local_link_id,json=localLinkId" json:"local_link_id,omitempty"`
	RemoteLinkId      *string                  `protobuf:"bytes,16,opt,name=remote_link_id,json=remoteLinkId" json:"remote_link_id,omitempty"`
	LocalLinkIp       *string                  `protobuf:"bytes,17,opt,name=local_link_ip,json=localLinkIp" json:"local_link_ip,omitempty"`
	RemoteLinkIp      *string                  `protobuf:"bytes,18,opt,name=remote_link_ip,json=remoteLinkIp" json:"remote_link_ip,omitempty"`
	IgpMetric         *uint32                  `protobuf:"varint,19,opt,name=igp_metric,json=igpMetric" json:"igp_metric,omitempty"`
	RemoteNodeHash    *string                  `protobuf:"bytes,20,opt,name=remote_node_hash,json=remoteNodeHash" json:"remote_node_hash,omitempty"`
	LocalNodeHash     *string                  `protobuf:"bytes,21,opt,name=local_node_hash,json=localNodeHash" json:"local_node_hash,omitempty"`
	RemoteIgpRouterId *string                  `protobuf:"bytes,22,opt,name=remote_igp_router_id,json=remoteIgpRouterId" json:"remote_igp_router_id,omitempty"`
}

func (x *LsLink) Reset() {
	*x = LsLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsLink) ProtoMessage() {}

func (x *LsLink) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsLink.ProtoReflect.Descriptor instead.
func (*LsLink) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{1}
}

func (x *LsLink) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsLink) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsLink) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LsLink) GetRouterIp() string {
	if x != nil && x.RouterIp != nil {
		return *x.RouterIp
	}
	return ""
}

func (x *LsLink) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *LsLink) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LsLink) GetPeerIp() string {
	if x != nil && x.PeerIp != nil {
		return *x.PeerIp
	}
	return ""
}

func (x *LsLink) GetPeerAsn() int32 {
	if x != nil && x.PeerAsn != nil {
		return *x.PeerAsn
	}
	return 0
}

func (x *LsLink) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LsLink) GetIgpRouterId() string {
	if x != nil && x.IgpRouterId != nil {
		return *x.IgpRouterId
	}
	return ""
}

func (x *LsLink) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LsLink) GetAreaId() string {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return ""
}

func (x *LsLink) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LsLink) GetMtid() *MultiTopologyIdentifier {
	if x != nil {
		return x.Mtid
	}
	return nil
}

func (x *LsLink) GetLocalLinkId() string {
	if x != nil && x.LocalLinkId != nil {
		return *x.LocalLinkId
	}
	return ""
}

func (x *LsLink) GetRemoteLinkId() string {
	if x != nil && x.RemoteLinkId != nil {
		return *x.RemoteLinkId
	}
	return ""
}

func (x *LsLink) GetLocalLinkIp() string {
	if x != nil && x.LocalLinkIp != nil {
		return *x.LocalLinkIp
	}
	return ""
}

func (x *LsLink) GetRemoteLinkIp() string {
	if x != nil && x.RemoteLinkIp != nil {
		return *x.RemoteLinkIp
	}
	return ""
}

func (x *LsLink) GetIgpMetric() uint32 {
	if x != nil && x.IgpMetric != nil {
		return *x.IgpMetric
	}
	return 0
}

func (x *LsLink) GetRemoteNodeHash() string {
	if x != nil && x.RemoteNodeHash != nil {
		return *x.RemoteNodeHash
	}
	return ""
}

func (x *LsLink) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LsLink) GetRemoteIgpRouterId() string {
	if x != nil && x.RemoteIgpRouterId != nil {
		return *x.RemoteIgpRouterId
	}
	return ""
}

type LsPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *string                  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id            *string                  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RouterHash    *string                  `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
	RouterIp      *string                  `protobuf:"bytes,4,opt,name=router_ip,json=routerIp" json:"router_ip,omitempty"`
	DomainId      *int64                   `protobuf:"varint,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	PeerHash      *string                  `protobuf:"bytes,6,opt,name=peer_hash,json=peerHash" json:"peer_hash,omitempty"`
	PeerIp        *string                  `protobuf:"bytes,7,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	PeerAsn       *int32                   `protobuf:"varint,8,opt,name=peer_asn,json=peerAsn" json:"peer_asn,omitempty"`
	Timestamp     *string                  `protobuf:"bytes,9,opt,name=timestamp" json:"timestamp,omitempty"`
	IgpRouterId   *string                  `protobuf:"bytes,10,opt,name=igp_router_id,json=igpRouterId" json:"igp_router_id,omitempty"`
	Protocol      *string                  `protobuf:"bytes,11,opt,name=protocol" json:"protocol,omitempty"`
	AreaId        *string                  `protobuf:"bytes,12,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	Nexthop       *string                  `protobuf:"bytes,13,opt,name=nexthop" json:"nexthop,omitempty"`
	LocalNodeHash *string                  `protobuf:"bytes,14,opt,name=local_node_hash,json=localNodeHash" json:"local_node_hash,omitempty"`
	Mtid          *MultiTopologyIdentifier `protobuf:"bytes,15,opt,name=mtid" json:"mtid,omitempty"`
	Prefix        *string                  `protobuf:"bytes,16,opt,name=prefix" json:"prefix,omitempty"`
	PrefixLen     *int32                   `protobuf:"varint,17,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	PrefixMetric  *uint32                  `protobuf:"varint,18,opt,name=prefix_metric,json=prefixMetric" json:"prefix_metric,omitempty"`
	IsPrepolicy   *bool                    `protobuf:"varint,19,opt,name=is_prepolicy,json=isPrepolicy" json:"is_prepolicy,omitempty"`
	IsAdjRibIn    *bool                    `protobuf:"varint,20,opt,name=is_adj_rib_in,json=isAdjRibIn" json:"is_adj_rib_in,omitempty"`
}

func (x *LsPrefix) Reset() {
	*x = LsPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsPrefix) ProtoMessage() {}

func (x *LsPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsPrefix.ProtoReflect.Descriptor instead.
func (*LsPrefix) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{2}
}

func (x *LsPrefix) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsPrefix) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsPrefix) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LsPrefix) GetRouterIp() string {
	if x != nil && x.RouterIp != nil {
		return *x.RouterIp
	}
	return ""
}

func (x *LsPrefix) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *LsPrefix) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LsPrefix) GetPeerIp() string {
	if x != nil && x.PeerIp != nil {
		return *x.PeerIp
	}
	return ""
}

func (x *LsPrefix) GetPeerAsn() int32 {
	if x != nil && x.PeerAsn != nil {
		return *x.PeerAsn
	}
	return 0
}

func (x *LsPrefix) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LsPrefix) GetIgpRouterId() string {
	if x != nil && x.IgpRouterId != nil {
		return *x.IgpRouterId
	}
	return ""
}

func (x *LsPrefix) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LsPrefix) GetAreaId() string {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return ""
}

func (x *LsPrefix) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LsPrefix) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LsPrefix) GetMtid() *MultiTopologyIdentifier {
	if x != nil {
		return x.Mtid
	}
	return nil
}

func (x *LsPrefix) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *LsPrefix) GetPrefixLen() int32 {
	if x != nil && x.PrefixLen != nil {
		return *x.PrefixLen
	}
	return 0
}

func (x *LsPrefix) GetPrefixMetric() uint32 {
	if x != nil && x.PrefixMetric != nil {
		return *x.PrefixMetric
	}
	return 0
}

func (x *LsPrefix) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LsPrefix) GetIsAdjRibIn() bool {
	if x != nil && x.IsAdjRibIn != nil {
		return *x.IsAdjRibIn
	}
	return false
}

type LsSrv6Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *string                  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id            *string                  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RouterHash    *string                  `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
	RouterIp      *string                  `protobuf:"bytes,4,opt,name=router_ip,json=routerIp" json:"router_ip,omitempty"`
	DomainId      *int64                   `protobuf:"varint,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	PeerHash      *string                  `protobuf:"bytes,6,opt,name=peer_hash,json=peerHash" json:"peer_hash,omitempty"`
	PeerIp        *string                  `protobuf:"bytes,7,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	PeerAsn       *int32                   `protobuf:"varint,8,opt,name=peer_asn,json=peerAsn" json:"peer_asn,omitempty"`
	Timestamp     *string                  `protobuf:"bytes,9,opt,name=timestamp" json:"timestamp,omitempty"`
	IgpRouterId   *string                  `protobuf:"bytes,10,opt,name=igp_router_id,json=igpRouterId" json:"igp_router_id,omitempty"`
	LocalNodeAsn  *uint32                  `protobuf:"varint,11,opt,name=local_node_asn,json=localNodeAsn" json:"local_node_asn,omitempty"`
	Protocol      *string                  `protobuf:"bytes,12,opt,name=protocol" json:"protocol,omitempty"`
	Nexthop       *string                  `protobuf:"bytes,13,opt,name=nexthop" json:"nexthop,omitempty"`
	LocalNodeHash *string                  `protobuf:"bytes,14,opt,name=local_node_hash,json=localNodeHash" json:"local_node_hash,omitempty"`
	Mtid          *MultiTopologyIdentifier `protobuf:"bytes,15,opt,name=mtid" json:"mtid,omitempty"`
	IgpFlags      *uint32                  `protobuf:"varint,16,opt,name=igp_flags,json=igpFlags" json:"igp_flags,omitempty"` // protobuf does not support uint8
	IsPrepolicy   *bool                    `protobuf:"varint,17,opt,name=is_prepolicy,json=isPrepolicy" json:"is_prepolicy,omitempty"`
	IsAdjRibIn    *bool                    `protobuf:"varint,18,opt,name=is_adj_rib_in,json=isAdjRibIn" json:"is_adj_rib_in,omitempty"`
	Srv6Sid       *string                  `protobuf:"bytes,19,opt,name=srv6_sid,json=srv6Sid" json:"srv6_sid,omitempty"`
}

func (x *LsSrv6Sid) Reset() {
	*x = LsSrv6Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsSrv6Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsSrv6Sid) ProtoMessage() {}

func (x *LsSrv6Sid) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsSrv6Sid.ProtoReflect.Descriptor instead.
func (*LsSrv6Sid) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{3}
}

func (x *LsSrv6Sid) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsSrv6Sid) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsSrv6Sid) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *LsSrv6Sid) GetRouterIp() string {
	if x != nil && x.RouterIp != nil {
		return *x.RouterIp
	}
	return ""
}

func (x *LsSrv6Sid) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *LsSrv6Sid) GetPeerHash() string {
	if x != nil && x.PeerHash != nil {
		return *x.PeerHash
	}
	return ""
}

func (x *LsSrv6Sid) GetPeerIp() string {
	if x != nil && x.PeerIp != nil {
		return *x.PeerIp
	}
	return ""
}

func (x *LsSrv6Sid) GetPeerAsn() int32 {
	if x != nil && x.PeerAsn != nil {
		return *x.PeerAsn
	}
	return 0
}

func (x *LsSrv6Sid) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *LsSrv6Sid) GetIgpRouterId() string {
	if x != nil && x.IgpRouterId != nil {
		return *x.IgpRouterId
	}
	return ""
}

func (x *LsSrv6Sid) GetLocalNodeAsn() uint32 {
	if x != nil && x.LocalNodeAsn != nil {
		return *x.LocalNodeAsn
	}
	return 0
}

func (x *LsSrv6Sid) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *LsSrv6Sid) GetNexthop() string {
	if x != nil && x.Nexthop != nil {
		return *x.Nexthop
	}
	return ""
}

func (x *LsSrv6Sid) GetLocalNodeHash() string {
	if x != nil && x.LocalNodeHash != nil {
		return *x.LocalNodeHash
	}
	return ""
}

func (x *LsSrv6Sid) GetMtid() *MultiTopologyIdentifier {
	if x != nil {
		return x.Mtid
	}
	return nil
}

func (x *LsSrv6Sid) GetIgpFlags() uint32 {
	if x != nil && x.IgpFlags != nil {
		return *x.IgpFlags
	}
	return 0
}

func (x *LsSrv6Sid) GetIsPrepolicy() bool {
	if x != nil && x.IsPrepolicy != nil {
		return *x.IsPrepolicy
	}
	return false
}

func (x *LsSrv6Sid) GetIsAdjRibIn() bool {
	if x != nil && x.IsAdjRibIn != nil {
		return *x.IsAdjRibIn
	}
	return false
}

func (x *LsSrv6Sid) GetSrv6Sid() string {
	if x != nil && x.Srv6Sid != nil {
		return *x.Srv6Sid
	}
	return ""
}

type LsNodeEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id   *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	From *string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To   *string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Link *string `protobuf:"bytes,5,opt,name=link" json:"link,omitempty"`
}

func (x *LsNodeEdge) Reset() {
	*x = LsNodeEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNodeEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNodeEdge) ProtoMessage() {}

func (x *LsNodeEdge) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNodeEdge.ProtoReflect.Descriptor instead.
func (*LsNodeEdge) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{4}
}

func (x *LsNodeEdge) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsNodeEdge) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsNodeEdge) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *LsNodeEdge) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *LsNodeEdge) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type LsNodeCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *string  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id        *string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	LsNodeKey *string  `protobuf:"bytes,3,req,name=ls_node_key,json=lsNodeKey" json:"ls_node_key,omitempty"`
	Latitude  *float64 `protobuf:"fixed64,4,req,name=latitude" json:"latitude,omitempty"`
	Longitude *float64 `protobuf:"fixed64,5,req,name=longitude" json:"longitude,omitempty"`
}

func (x *LsNodeCoordinates) Reset() {
	*x = LsNodeCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNodeCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNodeCoordinates) ProtoMessage() {}

func (x *LsNodeCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNodeCoordinates.ProtoReflect.Descriptor instead.
func (*LsNodeCoordinates) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{5}
}

func (x *LsNodeCoordinates) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *LsNodeCoordinates) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LsNodeCoordinates) GetLsNodeKey() string {
	if x != nil && x.LsNodeKey != nil {
		return *x.LsNodeKey
	}
	return ""
}

func (x *LsNodeCoordinates) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *LsNodeCoordinates) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Id          *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	RouterHash  *string `protobuf:"bytes,3,opt,name=router_hash,json=routerHash" json:"router_hash,omitempty"`
	RemoteBgpId *string `protobuf:"bytes,4,opt,name=remote_bgp_id,json=remoteBgpId" json:"remote_bgp_id,omitempty"`
	LocalBgpId  *string `protobuf:"bytes,5,opt,name=local_bgp_id,json=localBgpId" json:"local_bgp_id,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_core_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_core_topology_proto_rawDescGZIP(), []int{6}
}

func (x *Peer) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Peer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Peer) GetRouterHash() string {
	if x != nil && x.RouterHash != nil {
		return *x.RouterHash
	}
	return ""
}

func (x *Peer) GetRemoteBgpId() string {
	if x != nil && x.RemoteBgpId != nil {
		return *x.RemoteBgpId
	}
	return ""
}

func (x *Peer) GetLocalBgpId() string {
	if x != nil && x.LocalBgpId != nil {
		return *x.LocalBgpId
	}
	return ""
}

var File_core_topology_proto protoreflect.FileDescriptor

var file_core_topology_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6a, 0x61, 0x67, 0x77, 0x1a, 0x0f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x04, 0x0a,
	0x06, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x74, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x67, 0x77, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x22, 0xd0, 0x05, 0x0a,
	0x06, 0x4c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x67, 0x77, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xe6, 0x04, 0x0a, 0x08, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x67, 0x77, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x22, 0xd0, 0x04, 0x0a, 0x09, 0x4c, 0x73, 0x53,
	0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x74,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x67, 0x77, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x67, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x0a, 0x4c,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6c,
	0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x42, 0x67, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x67, 0x70, 0x49, 0x64, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6c, 0x61, 0x70, 0x65, 0x6e, 0x6f, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6a, 0x61, 0x67, 0x77, 0x3b, 0x6a, 0x61, 0x67, 0x77,
}

var (
	file_core_topology_proto_rawDescOnce sync.Once
	file_core_topology_proto_rawDescData = file_core_topology_proto_rawDesc
)

func file_core_topology_proto_rawDescGZIP() []byte {
	file_core_topology_proto_rawDescOnce.Do(func() {
		file_core_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_topology_proto_rawDescData)
	})
	return file_core_topology_proto_rawDescData
}

var file_core_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_core_topology_proto_goTypes = []interface{}{
	(*LsNode)(nil),                  // 0: jagw.LsNode
	(*LsLink)(nil),                  // 1: jagw.LsLink
	(*LsPrefix)(nil),                // 2: jagw.LsPrefix
	(*LsSrv6Sid)(nil),               // 3: jagw.LsSrv6Sid
	(*LsNodeEdge)(nil),              // 4: jagw.LsNodeEdge
	(*LsNodeCoordinates)(nil),       // 5: jagw.LsNodeCoordinates
	(*Peer)(nil),                    // 6: jagw.Peer
	(*MultiTopologyIdentifier)(nil), // 7: jagw.MultiTopologyIdentifier
}
var file_core_topology_proto_depIdxs = []int32{
	7, // 0: jagw.LsNode.mtid:type_name -> jagw.MultiTopologyIdentifier
	7, // 1: jagw.LsLink.mtid:type_name -> jagw.MultiTopologyIdentifier
	7, // 2: jagw.LsPrefix.mtid:type_name -> jagw.MultiTopologyIdentifier
	7, // 3: jagw.LsSrv6Sid.mtid:type_name -> jagw.MultiTopologyIdentifier
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_core_topology_proto_init() }
func file_core_topology_proto_init() {
	if File_core_topology_proto != nil {
		return
	}
	file_core_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_core_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsSrv6Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNodeEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNodeCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_topology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_topology_proto_goTypes,
		DependencyIndexes: file_core_topology_proto_depIdxs,
		MessageInfos:      file_core_topology_proto_msgTypes,
	}.Build()
	File_core_topology_proto = out.File
	file_core_topology_proto_rawDesc = nil
	file_core_topology_proto_goTypes = nil
	file_core_topology_proto_depIdxs = nil
}
